#include "stdafx.h"
#include "Map.h"
#include "EnemyManager.h"
#include "Player.h"

Map::Map()
{
}


Map::~Map()
{
}
HRESULT Map::init()
{
	setTile();

	return S_OK;
}
void Map::release()
{

}
void Map::update()
{

}
void Map::render()
{
}

//그릴 때	x좌표에 (WINSIZEX/2 - camera.x) 만큼
//			y좌표에 (WINSIZEY/2 - camera.y) 만큼 더해주기!!!!
void Map::render(POINT camera)
{
	
	draw(camera);
}
void Map::draw(POINT camera)
{
	IMAGEMANAGER->render("bg", getMemDC(), WINSIZEX/2-camera.x,WINSIZEY/2-camera.y);
}
void Map::setTile()
{
	//맵 구성
	int temp[40][58] = {
		{ 1,1,1,1,1,   1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,    1,1,1,1,1 },



		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 1,0,0,0,0, 0,0,1,1,1, 1,1,0,0,0, 1,1,1,1,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,1,1,1, 0,0,0,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 1,0,1,1,0, 0,0,1,1,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,1,1,1, 1,0,0,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 0,0,1,1,0, 0,0,0,1,0, 1,0,0,0,0, 0,0,1,0,1, 0,0,0,0,0, 0,0,0,1,0, 0,0,0,1,1, 0,0,0,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 0,0,1,1,1, 1,0,0,0,0, 1,0,0,0,0, 0,0,1,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,1,1, 0,0,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 0,0,0,0,1, 1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 1,0,0,0,0, 0,0,1,0,1, 1,0,0,0,0, 0,0,1,    1,1,1,1,1 },

		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,    1,1,1,1,1 },

		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,    1,1,1,1,1 },

		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,    1,1,1,1,1 },

		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,    1,1,1,1,1 },

		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,    1,1,1,1,1 },




		{ 1,1,1,1,1,   1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,    1,1,1,1,1 },
		{ 1,1,1,1,1,   1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,    1,1,1,1,1 }
	};

	for (int i = 0; i < 40; i++)
	{
		for (int j = 0; j < 58; j++)
		{
			_mapInfo[i][j].rc = RectMake(_mapInfo[i][j].point.x, _mapInfo[i][j].point.y, TILESIZE, TILESIZE);
		}
	}


	for (int i = 0; i < 40; i++)
	{
		for (int j = 0; j < 58; j++)
		{
			_mapInfo[i][j].type = temp[i][j];
			_mapInfo[i][j].point = PointMake(i*TILESIZE, j*TILESIZE);
			_mapInfo[i][j].rc = RectMake(_mapInfo[i][j].point.x, _mapInfo[i][j].point.y, TILESIZE, TILESIZE);
			switch (_mapInfo[i][j].type)
			{
			case MAPTILE_NULL:
				//벽, 바닥 없음
				break;
			case MAPTILE_WALL:
				//tileSize(48)크기 만큼의 RECT만들기
				break;
			case MAPTILE_WALL2:
				//tileSize(48)크기 만큼의 RECT만들기 (부서지는벽)
				break;
			case MAPTILE_LADDER:
				//사다리
				break;
			case MAPTILE_GROUND_CAN_GO_DOWN_1:
				//아래로 내려갈 수 있는 발판
				break;
			case MAPTILE_GROUND_CAN_GO_DOWN_2:
				//아래로 내려갈 수 있는 발판
				break;
			case MAPTILE_TRAP_SPIKE:
				//가시트랩
				break;
			case MAPTILE_TRAP_ARROW:
				//화살트랩
				break;
			case MAPTILE_TRAP_ROCK:
				//바위트랩
				break;
			}
		}
	}

}